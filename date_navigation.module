<?php

/**
 * @file
 * Date Navigation provides a custimizable block of navigation to nodes based on their
 * creation date, changed date, or publication date if the Publication Date module is enabled.
 * The idea is to mimic the date navigation of a WordPress-style blog.
 * This module is based largely on the WP_Blog and Simple Node Archive Blocks modules, 
 * but strives to be more flexible than these 2 modules.
 */
 
// Define the default content type to be listed in the navigation
// This will be changeable through the admin UI.
define('DATE_NAVIGATION_CONTENT_TYPES', 'article');
 
/**
 * Implements hook_help().
 */
function date_navigation_help($path, $arg) {
  switch ($path) {
    case 'admin/help#date_navigation':
      $output = '';
      $output .= t('<p>The Date Navigation module provides a custimizable block of navigation to nodes based on their creation date, changed date, or publication date if the <a href="@publication_date_url">Publication Date module</a> is enabled. The idea is to mimic the date navigation of a WordPress-style blog, but in a very flexible way.</p>', array('@publication_date_url' => url('http://drupal.org/project/publication_date'), ));
      $output .= t('<p>This module is based largely on the <a href="@wp_blog_url">WP_Blog</a> and <a href="@snab_url">Simple Node Archive Blocks</a> modules, but strives to be more flexible. One of the major differences between this module from the <a href="@wp_blog_url">WP_Blog module</a> is that this module does not create a unique content type, i.e. WP blog post (Machine name: wp_blog).  This module also differs from the <a href="@snab_url">Simple Node Archive Blocks</a> module in that it does not build hard coded URIs that may not work with your sites architecture.</p>', array('@wp_blog_url' => url('http://drupal.org/project/wp_blog'),'@snab_url' => url('http://drupal.org/project/sna_blocks'),));
      $output .= t('This module provides:');
      $output .= '<ul>';
      $output .= '<li>' . t('A default view of article pages that can be browsed by year, month or day. For example: !example_urls.', array('!example_urls' => "<br />\n/articles<br />\n/articles/2013<br />\n/articles/2013/01<br />\n/articles/2013/01/13")) . '</li>';
      $output .= '<li>' . t('A date navigation menu which links to content broken down by years, months, and days with a count of the number of blog posts for each.') . '</li>';
      $output .= '</ul>';
      $output .= t('The other major difference with this module has from the <a href="@url">WP_Blog</a> and <a href="@snab_url">Simple Node Archive Blocks</a> modules are that the above URLs are customizable.', array('@wp_blog_url' => url('http://drupal.org/project/wp_blog'),'@snab_url' => url('http://drupal.org/project/sna_blocks'),));

      $output .= '<h2>' . t('Recommended modules') . '</h2>';
      $output .= '<ul>';
      $output .= '<li>' . t('The <a href="@publication_date_url">Publication Date module</a> adds to each node a field containing the date when it has been published.  Without this, the only dates available are the creation date and the
update date.  But in reality for most users, the important date is when the content was published.  So we highly recommend using this module.', array('@publication_date_url' => url('http://drupal.org/project/publication_date'),)) . '</li>';
      $output .= '<li>' . t('The <a href="@jquerymenu_url">Publication Date module</a> provides simple, cross browser compatible jquery to transform your multilevel menus into click and expand menus.  So we also highly recommend using this module as well.', array('@jquerymenu_url' => url('http://drupal.org/project/jquerymenu'),)) . '</li>';
      $output .= '</ul>';

      return $output;
  }
}

/*
 * Implements hook_permission
 */

function date_navigation_permission() {
  return array(
    'administer date navigation' => array(
      'title' => t('Administer date navigation'), 
      'description' => t('Perform administration tasks for the Date Navigation module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function date_navigation_menu() {
  $items['admin/config/user-interface/date-navigation/settings'] = array(
    'title' => 'Date Navigation Settings',
    'description' => 'Configure Entities for Date Navigation.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('date_navigation_admin_settings'),
    'access arguments' => array('administer date navigation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'date_navigation.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function date_navigation_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'date_navigation') . '/views'
  );
}

/**
 * Implements hook_block_info().
 */
function date_navigation_block_info() {
  // Node archive.
  $block_types = variable_get('date_navigation_block_types', array('page'));
  foreach ($block_types as $type => $value) {
    // Check the selected block types.
    if ($value != '0') {
      $blocks['dn-node-' . $value] = array(
        'info' => t('Date Navigation - Node : @name', array('@name' => $value)),
      );
    }
  }
  // Taxonomy archive.
  $taxonomy_options = variable_get('date_navigation_taxonomy_options', array());
  $taxonomy_archive = variable_get('date_navigation_taxonomy_items', array());
  foreach ($taxonomy_archive as $type => $value) {
    // Check the selected block types.
    if ($value != '0') {
      $blocks['dn-taxo-' . $value] = array(
        'info' => t('Date Navigation - Taxonomy : @name', array('@name' => $taxonomy_options[$value])),
      );
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function date_navigation_block_view($delta = '') {
  $block = array();
  $archive_items = variable_get('date_navigation_items', 0);
  $arg = explode('/', $_GET['q']);
  dsm($_GET['q']);
  dsm($arg	);
  
  $year = $arg[0] == 'articles' && $arg[1] != '' && is_numeric($arg[1]) ? $arg[1] : '';
  $month = $arg[0] == 'articles' && $arg[2] != '00' && is_numeric($arg[2]) ? date('F', mktime(0, 0, 0, $arg[2])) : '';

  // Node archive.
  $block_types = variable_get('date_navigation_block_types', array('page'));
  foreach ($block_types as $type => $value) {
    if ($delta == ('dn-node-' . $value)) {
      $block['subject'] = t('@names by Date', array('@name' => ucwords($value)));
      $block['content'] = theme('date_navigation_node', array(
        'value' => $value,
        'archive_items' => $archive_items,
        'year' => $year,
        'month' => $month,
        ));
    }
  }
  // Taxonomy Archive.
  $taxonomy_options = variable_get('date_navigation_taxonomy_options', array());
  $taxonomy_archive = variable_get('date_navigation_taxonomy_items', array());
  foreach ($taxonomy_archive as $type => $value) {
    if ($delta == ('dn-taxo-' . $value)) {
      $block['subject'] = t('@names by Date', array('@name' => ucwords($taxonomy_options[$value])));
      $block['content'] = theme('date_navigation_taxonomy', array(
        'value' => $value,
        'archive_items' => $archive_items,
        'year' => $year,
        'month' => $month,
        ));
    }
  }

  return $block;
}

/**
 * Implements hook_theme().
 */
function date_navigation_theme() {
  return array(
    'date_navigation_node' => array(
      'variables' => array(
        'value' => NULL,
        'archive_items' => NULL,
        'year' => NULL,
        'month' => NULL,
      ),
    ),
    'date_navigation_taxonomy' => array(
      'variables' => array(
        'value' => NULL,
        'archive_items' => NULL,
        'year' => NULL,
        'month' => NULL,
      ),
    ),
  );
}

/**
 * Returns a chronological archive block for node type.
 */
function theme_date_navigation_node($variables) {
  $node_type = $variables['value'];
  $archive_items = $variables['archive_items'];
  $display_year = $variables['year'];
  $display_month = $variables['month'];

  // Get an associate array contain the results.
  // Array([year(counter)] => Array([month(counter)] => Array([nid] => title)))
  $results = _date_navigation_resultset($node_type, 'node');
  $html = _date_navigation_archivehtml($results, $archive_items, $display_year, $display_month, $node_type, 'node');

  return $html;
}

/**
 * Returns a chronological archive block for node Vocabulary or Term.
 */
function theme_date_navigation_taxonomy($variables) {
  $taxonomy_value = $variables['value'];
  $archive_items = $variables['archive_items'];
  $display_year = $variables['year'];
  $display_month = $variables['month'];
  $taxonomy_options = variable_get('date_navigation_taxonomy_options', array());
  if (empty($taxonomy_options)) {
    return t('No Content Posted.');
  }
  $tids = array();
  // $taxonomy_value is a concatenated string
  // Like V7 for Vocabilary or T7 for Term.
  // Get term ids for Vocabulary.
  if ($taxonomy_value[0] == 'V') {
    $taxonomy_value = substr($taxonomy_value, 1);
    $vocabilary_id = $taxonomy_value;
    $terms = taxonomy_get_tree($vocabilary_id);
    foreach ($terms as $term) {
      $tids[$term->tid] = $term->tid;
    }
  }
  elseif ($taxonomy_value[0] == 'T') {
    $taxonomy_value = substr($taxonomy_value, 1);
    $tids[$taxonomy_value] = $taxonomy_value;
  }

  $results = _date_navigation_resultset($tids, 'terms');
  $html = _date_navigation_archivehtml($results, $archive_items, $display_year, $display_month, $tids, 'terms');

  return $html;
}

/**
 * Fectch the records from database and format to an associate array.
 *
 * @param string|array $value
 *   String contain node machine name for node type archive block.
 *   Array contain term ids for taxonomy archive block.
 * @param string $type
 *   Type of archive block 'node' or 'terms'.
 *
 * @return array
 *   An associate arrry.
 */
function _date_navigation_resultset($value, $type) {
  global $language;
  $archive = array();
  // Select current user's language.
  if (module_exists('locale')) {
    $lang = $language->language;
  }
  else {
    $lang = 'und';
  }
  if ($type == 'node') {
    // Build the query for Node type archive.
    $query = db_select('node','n');
	  if (module_exists('publication_date')) {
     	$query->join('publication_date', 'pd', 'n.nid = pd.nid'); //JOIN node with publication_date
     	$query->fields('n', array('nid', 'type', 'title'))//SELECT the fields from node table
     	->fields('pd', array('published_at')); //SELECT the fields from publication_date table
     } else {
      $query->fields('node', array('nid', 'type', 'title', 'created'));
  	}
    $query->condition('status', 1);
    if ($value == 'custom') {
      $custom_selection = variable_get('date_navigation_custom_selection', array('page'));
      foreach ($custom_selection as $k => $v) {
        if ($v != '0') {
          $condition[] = $v;
        }
      }
      $query->condition('type', $condition, 'IN');
    }
    elseif ($value != 'all') {
      $query->condition('type', $value);
    }
    $query->condition('language', $lang);
    if (module_exists('publication_date')) {
      $query->orderBy('published_at', 'DESC');
    } else {
      $query->orderBy('created', 'DESC');
    }
    $query->addTag('node_access');
    $results = $query->execute()->fetchAll();

  }
  elseif ($type == 'terms') {
    // Build query for taxonomy type archive.
    $subquery = db_select('taxonomy_index', 'tn');
    $subquery->addField('tn', 'nid');
    $subquery->condition('tid', $value, 'IN');

    $query = db_select('node');
//    if (module_exists('publication_date')) {
//      	$query->join('publication_date', 'pd', 'n.nid = pd.nid'); //JOIN node with publication_date
//      	$query->fields('n', array('nid', 'type', 'title'))//SELECT the fields from node table
//      	->fields('pd', array('published_at')); //SELECT the fields from publication_date table
//      } else {
      $query->fields('node', array('nid', 'type', 'title', 'created'));
//  	}
    $query->condition('status', 1);
    $query->condition('nid', $subquery, 'IN');
    $query->condition('language', $lang);
    if (module_exists('publication_date')) {
      $query->orderBy('published_at', 'DESC');
    } else {
      $query->orderBy('created', 'DESC');
    }
    $query->addTag('node_access');
    $query->addTag('term_access');
    $results = $query->execute()->fetchAll();
  }
  else {
    return $archive;
  }

  // Adding year and month field.
  foreach ($results as $row) {
		if (module_exists('publication_date')) {
    	$archive[date('Y', $row->published_at)][date('F', $row->published_at)][$row->nid] = $row->title;
    } else {
    	$archive[date('Y', $row->created)][date('F', $row->created)][$row->nid] = $row->title;
    }
  }
  // Adding count field.
  if (!empty($archive)) {
    foreach ($archive as $year => $month) {
      $year_count = 0;
      foreach ($month as $key => $title) {
        $count = count($title, COUNT_RECURSIVE);
        $archive[$year][$key . ' (' . $count . ')'] = $archive[$year][$key];
        unset($archive[$year][$key]);
        $year_count += $count;
      }
      $archive[$year . ' (' . $year_count . ')'] = $archive[$year];
      unset($archive[$year]);
    }
  }

  return $archive;
}

/**
 * Theme the result set to HTML.
 *
 * @param array $results
 *   Associate array in format
 *   Array([year(counter)] => Array([month(counter)] => Array([nid] => title)))
 * @param string $archive_items
 *   Number node to be shown in expanded archive.
 * @param string $display_year
 *   Which year to be shown in archive.
 *   A full numeric representation of a year, 4 digit.
 * @param string $display_month
 *   Which month to be shown in arhive.
 *   Numeric representation of a month, with leading zeros.
 *
 * @return string
 *   An HTML string.
 */
function _date_navigation_archivehtml($results, $archive_items, $display_year, $display_month, $values, $block_type) {
  $output = t('No Content Posted.');
  $view_taxo_arg = 'all';
  $view_node_arg = 'all';

  $use_jquerymenu = variable_get('date_navigation_jquerymenu', 0);
  if ($use_jquerymenu) {
    $use_jquerymenu = $use_jquerymenu[1];
  }

  // Set taxonomy & node type argument for view.
  if ($block_type == 'terms' && is_array($values)) {
    if (count($values) == 1) {
      $view_taxo_arg = key($values);
    }
    else {
      $view_taxo_arg = implode('+', $values);
    }
  }
  if ($block_type == 'node') {
    $view_node_arg = $values;
  }

  // Need to find active block.
  $arg = explode('/', $_GET['q']);
  $active_block = FALSE;
  if ($arg[0] == 'articles' && $block_type == 'node' && $arg[3] == $view_node_arg && $arg[4] == 'all') {
    $active_block = TRUE;
  }
  $arg[4] = isset($arg[4]) ? str_replace(' ', '+', $arg[4]) : 0;
  if ($arg[0] == 'articles' && $block_type == 'terms' && $arg[4] == $view_taxo_arg) {
    $active_block = TRUE;
  }

  if ($node = menu_get_object()) {
    if (module_exists('publication_date')) {
    	$node_created = $node->published_at;
    } else {
      $node_created = $node->created;
    }
    $display_year = date('Y', $node_created);
    $display_month = date('F', $node_created);
    if ($block_type == 'node') {
      if ($values == 'all') {
        $active_block = TRUE;
      }
      elseif ($values == 'custom') {
        $node_types = variable_get('date_navigation_custom_selection', array('page'));
        if (isset($node_types[$node->type]) && $node_types[$node->type] != '0') {
          $active_block = TRUE;
        }
      }
      elseif ($node->type == $values) {
        $active_block = TRUE;
      }
    }
    elseif ($block_type == 'terms') {
      $terms = _date_navigation_nodeterms($node->nid);
      if (!empty($terms)) {
        foreach ($terms as $key => $value) {
          if (in_array($key, $values)) {
            $active_block = TRUE;
          }
        }
      }
    }
  }

  $year_items = $trail = array();
  // Build the HTML.
  if (!empty($results)) {
    $theme_arr = array();
    // Loop through earch year.
    foreach ($results as $year => $months) {
      $year_value = explode(' ', $year);
      // $year_value[0] contain year value and $year_value[1] conatian count.
      $year_url = $view_node_arg . 's/' . $year_value[0] . '/00/' . '/' . $view_taxo_arg;

      // Check for active year branch and block.
      $expand_year = $display_year == $year_value[0] && $active_block ? TRUE : FALSE;

      $children_months = array();
      // If Using Jquery Menu.
      if ($use_jquerymenu) {
        unset($year_item);
        unset($month_items);
        $year_item['link']['href'] = $year_url;
        $year_item['link']['title'] = t($year_value[0]) . ' ' . $year_value[1];
        $year_item['link']['has_children'] = 1;
        $year_item['link']['expanded'] = 0;
        $year_item['link']['options']['attributes'] = array();
        $year_item['link']['hidden'] = 0;
        if ($expand_year) {
          $trail[0] = $year_item['link']['href'];
        }
        $expand_year = TRUE;
      }

      if ($expand_year) {
        // Loop through active year and show month.
        foreach ($months as $month => $nodes) {
          $month_value = explode(' ', $month);
          // $month_value[0] contain month and $month_value[1] conatian count.
          $month_url = $view_node_arg .'s/' . $year_value[0] . '/' . date('m', strtotime($month_value[0], '1')) . '/' . '/' . $view_taxo_arg;

          // Check for active month and block.
          $expand_month = $display_year == $year_value[0] && $display_month == $month_value[0] && $active_block ? TRUE : FALSE;

          $children_nodes = array();
          // If Using Jquery Menu.
          if ($use_jquerymenu) {
            unset($month_item);
            unset($node_items);
            $month_item['link']['href'] = $month_url;
            $month_item['link']['title'] = t($month_value[0]) . ' ' . $month_value[1];
            $month_item['link']['has_children'] = 1;
            $month_item['link']['expanded'] = 0;
            $month_item['link']['options']['attributes'] = array();
            $month_item['link']['hidden'] = 0;
            if ($expand_month) {
              $trail[0] = $year_item['link']['href'];
              $trail[1] = $month_item['link']['href'];
            }
            $expand_month = TRUE;
          }

          if ($expand_month) {
            $count = 1;
            // Loop through acitive month and show node.
            foreach ($nodes as $nid => $title) {
              // If Using Jquery Menu.
              if ($use_jquerymenu) {
                unset($node_item);
              }
              // $archive_items number of nodes display in expanded archive.
              if ($count <= $archive_items || $archive_items == 0) {
                $children_nodes[] = l($title, 'node/' . $nid);
                // If Using Jquery Menu.
                if ($use_jquerymenu) {
                  $node_item['link']['href'] = 'node/' . $nid;
                  $node_item['link']['title'] = $title;
                  $node_item['link']['has_children'] = 0;
                  $node_item['link']['expanded'] = 0;
                  $node_item['link']['options']['attributes'] = array();
                  $node_item['link']['hidden'] = 0;
                }
              }
              $count = $count != 0 ? $count + 1 : 0;

              // If Using Jquery Menu.
              if ($use_jquerymenu) {
                $node_items[] = $node_item;
              }
            }

            // If Using Jquery Menu.
            if ($use_jquerymenu) {
              $month_item['below'] = $node_items;
              $month_items[] = $month_item;
            }
          }
          $children_months[] = array(
            'data' => l(t($month_value[0]), $month_url) . '&nbsp;<span>' . $month_value[1] . '</span>',
            'children' => $children_nodes,
          );
        }

        // If Using Jquery Menu.
        if ($use_jquerymenu) {
          $year_item['below'] = $month_items;
          $year_items[] = $year_item;
        }
      }
      $theme_arr[] = array(
        'data' => l(t($year_value[0]), $year_url) . '&nbsp;<span>' . $year_value[1] . '</span>',
        'children' => $children_months,
      );
    }

    // If Using Jquery Menu.
    if ($use_jquerymenu) {
      $output = theme('jquerymenu_menu', array('tree' => $year_items, 'trail' => $trail));
    }
    else {
      $output = theme('item_list', array('items' => $theme_arr));
    }
  }
  else {
    // Term is not tagged with any node.
    $output = t('No posts available');
  }

  return $output;
}

/**
 * Get the list terms that are tagged in a Node.
 *
 * @param int $nid
 *   Node id.
 *
 * @return array
 *   Array cotaining the list of terms.
 */
function _date_navigation_nodeterms($nid) {
  $terms = array();
  $query = db_select('node', 'N');
  $query->addJoin('INNER', 'taxonomy_index', 'T', 'N.nid = T.nid');
  $query->addJoin('INNER', 'taxonomy_term_data', 'TD', 'T.tid = TD.tid');
  $query->fields('T', array('tid'));
  $query->fields('TD', array('name'));
  $query->condition('N.nid', $nid);
  $query->addTag('node_access');
  $query->addTag('term_access');

  return $query->execute()->fetchAllKeyed();
}