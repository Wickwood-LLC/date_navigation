<?php

/**
 * @file
 * Date Navigation provides a custimizable block of navigation to nodes based on their
 * creation date, changed date, or publication date if the Publication Date module is enabled.
 * The idea is to mimic the date navigation of a WordPress-style blog.
 * This module is based largely on the WP_Blog and Simple Node Archive Blocks modules, 
 * but strives to be more flexible than these 2 modules.
 */
 
// Define the default content type to be listed in the navigation
// This will be changeable through the admin UI.
define('DATE_NAVIGATION_CONTENT_TYPES', 'article');
 
/**
 * Implements hook_help().
 */
function date_navigation_help($path, $arg) {
  switch ($path) {
    case 'admin/help#date_navigation':
      $output = '';
      $output .= t('<p>The Date Navigation module provides a custimizable block of navigation to nodes based on their creation date, changed date, or publication date if the <a href="@publication_date_url">Publication Date module</a> is enabled. The idea is to mimic the date navigation of a WordPress-style blog, but in a very flexible way.</p>', array('@publication_date_url' => url('http://drupal.org/project/publication_date'), ));
      $output .= t('<p>This module is based largely on the <a href="@wp_blog_url">WP_Blog</a> and <a href="@snab_url">Simple Node Archive Blocks</a> modules, but strives to be more flexible. One of the major differences between this module from the <a href="@wp_blog_url">WP_Blog module</a> is that this module does not create a unique content type, i.e. WP blog post (Machine name: wp_blog).  This module also differs from the <a href="@snab_url">Simple Node Archive Blocks</a> module in that it does not build hard coded URIs that may not work with your sites architecture.</p>', array('@wp_blog_url' => url('http://drupal.org/project/wp_blog'),'@snab_url' => url('http://drupal.org/project/sna_blocks'),));
      $output .= t('This module provides:');
      $output .= '<ul>';
      $output .= '<li>' . t('A default view of article pages that can be browsed by year, month or day. For example: !example_urls.', array('!example_urls' => "<br />\n/articles<br />\n/articles/2013<br />\n/articles/2013/01<br />\n/articles/2013/01/13")) . '</li>';
      $output .= '<li>' . t('A date navigation menu which links to content broken down by years, months, and days with a count of the number of blog posts for each.') . '</li>';
      $output .= '</ul>';
      $output .= t('The other major difference with this module has from the <a href="@url">WP_Blog</a> and <a href="@snab_url">Simple Node Archive Blocks</a> modules are that the above URLs are customizable.', aarray('@wp_blog_url' => url('http://drupal.org/project/wp_blog'),'@snab_url' => url('http://drupal.org/project/sna_blocks'),));

      $output .= '<h2>' . t('Recommended modules') . '</h2>';
      $output .= '<ul>';
      $output .= '<li>' . t('The <a href="@publication_date_url">Publication Date module</a> adds to each node a field containing the date when it has been published.  Without this, the only dates available are the creation date and the
update date.  But in reality for most users, the important date is when the content was published.  So we highly recommend using this module.', array('@publication_date_url' => url('http://drupal.org/project/publication_date'),)) . '</li>';
      $output .= '</ul>';

      return $output;
  }
}

/*
 * Implements hook_permission
 */

function date_navigation_permission() {
  return array(
    'administer date navigation' => array(
      'title' => t('Administer date navigation'), 
      'description' => t('Perform administration tasks for the Date Navigation module.'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function date_navigation_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_theme().
 */
function date_navigation_theme() {
  return array(
    // date_navigation_archive is the sidebar menu which displays the date navigation.
    'date_navigation_archive' => array(
      'render element' => 'element',
      'file' => 'date_navigation.theme.inc',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function date_navigation_block_info() {
  $blocks['date_navigation'] = array(
    'info' => t('Date navigation'),
    // The block displays a navigation menu, which may have active menu-items.
    // The active menu-items will change per page, and the accessible blog
    // posts may change per user, depending on permissions.
    'cache' => DRUPAL_CACHE_PER_PAGE | DRUPAL_CACHE_PER_USER,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function date_navigation_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'date_navigation':
      $archive = _date_navigation_get_archive_tree();
      // If there aren't any posts, hide the block.
      if (empty($archive)) {
        return;
      }

      $block = array(
        'subject' => t('Archive'),
        'content' => array(
          'show_all_link' => l(t('All posts'), 'articles'),
          'archive' => $archive,
          '#theme' => 'date_navigation_archive',
          '#cache' => DRUPAL_CACHE_PER_PAGE | DRUPAL_CACHE_PER_USER,
        ),
      );
  }
  return $block;
}

/**
 * Build a data tree of all published content broken down by 
 * their created year, month, and day with post-counts.
 *
 * Format:
 * [2013] =>
 *           count  => 3
 *           text   => 2013
 *           months =>
 *                     [1] =>
 *                            count => 1
 *                            text  => January
 *                            days  =>
 *                                     [16] =>
 *                                             count => 1
 *                                             text  => Tuesday
 */
function _date_navigation_get_archive_tree() {
  $tree = array();
  
  // Declare the use of month-names and days to ensure that 
  // translation tools can discover language-use in this module.
  array(
    t('Sunday'),
    t('Monday'),
    t('Tuesday'),
    t('Wednesday'),
    t('Thursday'),
    t('Friday'),
    t('Saturday'),
  );
  array(
    t('January'),
    t('February'),
    t('March'),
    t('April'),
    t('May'),
    t('June'),
    t('July'),
    t('August'),
    t('September'),
    t('October'),
    t('November'),
    t('December'),
  );

  foreach (_date_navigation__get_posts() as $post) {
    // Assume that getdate will return month-names in English.
    $date = (object) getdate($post->created);

    // Add the year.
    if (!array_key_exists($date->year, $tree)) {
      $tree[$date->year] = array(
        'count' => 0,
        // The year is numeric (e.g. 2011) so is not translated.
        'text' => $date->year,
        'url' => 'articles/' . $date->year,
        'months' => array(),
      );
    }

    // Add the month.
    if (!array_key_exists($date->mon, $tree[$date->year]['months'])) {
      $tree[$date->year]['months'][$date->mon] = array(
        'count' => 0,
        // The month-name is a string (January, February, etc) so is translated.
        'text' => t($date->month),
        'url' => $tree[$date->year]['url'] . '/' . str_pad($date->mon, 2, '0', STR_PAD_LEFT),
        'days' => array(),
      );
    }
    

     // Add the day.
    if (!array_key_exists($date->mday, $tree[$date->year]['months'][$date->mon]['days'])) {
      $tree[$date->year]['months'][$date->mon]['days'][$date->mday] = array(
        'count' => 0,
        // The week-day is numeric (0 - 31) so is not translated.
        'text' => $date->weekday,
        'url' => $tree[$date->year]['months'][$date->mon]['url'] . '/' . str_pad($date->mday, 2, '0', STR_PAD_LEFT),
      );
    }
    $tree[$date->year]['count']++;
    $tree[$date->year]['months'][$date->mon]['count']++;
    $tree[$date->year]['months'][$date->mon]['days'][$date->mday]['count']++;
  }
  return $tree;
}

/**
 * Fetch the nid and created-date of all published nodes of selected content types.
 *
 * @return array
 * An array of objects, each with the property nid and created, 
 * sorted by creation-time (new to old).
 */
function _date_navigation__get_posts() {
  $posts = &drupal_static(__FUNCTION__, NULL);
  if (is_null($posts)) {
    // Query for nodes which the current user has access to.
    $posts = db_select('node', 'n', array('target' => 'slave'))
      ->fields('n', array('nid', 'created'))
      ->condition("n.type", DATE_NAVIGATION_CONTENT_TYPES)
      ->condition("n.status", NODE_PUBLISHED)
      ->orderBy("n.created", 'DESC')
      ->addTag('node_access')
      ->execute()
      ->fetchAll();
  }
  return $posts;
}